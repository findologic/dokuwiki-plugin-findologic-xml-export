<?php
/**
 * This is the Dokuwiki export for FINDOLOGIC.
 *
 * If any bugs occur, please submit a new issue
 * @see https://github.com/findologic/dokuwiki-plugin-findologic-xml-export/issues/new
 * @author Dominik Brader <support@findologic.com>
 */

if (!defined('DOKU_INC')) {
    die('Must be run within DokuWiki!');
}

require_once(__DIR__ . '/vendor/autoload.php');
require_once(__DIR__ . '/PageGetter.php');
require_once(__DIR__ . '/DokuwikiPage.php');

class admin_plugin_findologicxmlexport extends DokuWiki_Admin_Plugin
{

    /**
     * SVG image URL for the edit button.
     */
    const EDIT_IMAGE_URL = DOKU_URL . 'lib/plugins/findologicxmlexport/resources/edit.svg';

    const EXPORT_URL = DOKU_URL . 'lib/plugins/findologicxmlexport';
    const STYLESHEET_URL = DOKU_URL . 'lib/plugins/findologicxmlexport/resources/style.css';

    /**
     * Sort plugin in the DokuWiki admin interface.
     * The lower this value is, the higher it is sorted.
     */
    const MENU_SORT = 1;

    /**
     * Template folder directory.
     */
    const TEMPLATE_DIR = __DIR__ . '/tpl';

    /**
     * Template file name. Directory is set in constant TEMPLATE_DIR.
     */
    const TEMPLATE_FILE = 'admin.tpl';

    /**
     * Variable name for translations set in the DokuWiki.
     * It is used for the template.
     */
    const LANGUAGE_VARIABLE_NAME = 'languageText';

    /**
     * @return int sorting of the plugin in the plugin manager.
     */
    public function getMenuSort()
    {
        return self::MENU_SORT;
    }

    /**
     * Admins or higher can access this plugin.
     *
     * You do not need to be a superuser to access this plugin.
     */
    public function forAdminOnly()
    {
        return true;
    }

    /**
     * HTML output (gets generated by twig).
     */
    public function html()
    {
        $pagesWithoutTitle = PageGetter::getPagesWithoutTitle();

        $urls = [
            'editImageUrl' => self::EDIT_IMAGE_URL,
            'exportUrl' => self::EXPORT_URL,
            'stylesheetUrl' => self::STYLESHEET_URL
        ];

        $variablesForTemplate = ['var' => array_merge($pagesWithoutTitle, $urls)];

        // Set up loader and environment for twig.
        $loader = new Twig_Loader_Filesystem(self::TEMPLATE_DIR);
        $twig = new Twig_Environment($loader);

        $initLanguage = $this->getLang(''); // Loads the translations set in the plugin translation.

        // Add globals because this is the only way to add variables without declaring them directly in the template.
        $twig->addGlobal(self::LANGUAGE_VARIABLE_NAME, $this->lang);

        echo $twig->render(self::TEMPLATE_FILE, $variablesForTemplate);
    }

    /**
     * Ignore;
     * This method is not used, but required, or a warning will get thrown.
     */
    public function handle()
    {
    }

    /**
     * @param $pagesWithoutTitle array of pages without title.
     * @return array variables for twig template.
     */
    private function getVariablesForTemplate($pagesWithoutTitle)
    {

        // Generate variables based on page data
        foreach ($pagesWithoutTitle as $key => $page) {
            $metadata[] = p_get_metadata($page);
            $url[] = wl($page, '', true);

            // Make new DateTime Object and Format it
            $modifiedTimeStamp[] = $this->formatTime($metadata[$key]['last_change']['date']);
        }

        // Put variables to array
        $variables = array(
            'pagesWithoutTitle' => $pagesWithoutTitle,
            'metadata' => $metadata,
            'urls' => $url,
            'timestamp' => $modifiedTimeStamp,
            'imageUrl' => self::EDIT_IMAGE_URL
        );

        return $variables;
    }
}